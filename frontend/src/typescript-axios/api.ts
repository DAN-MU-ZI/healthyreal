/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BodyInfo
 */
export interface BodyInfo {
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BodyInfo
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'weight'?: number;
    /**
     * 
     * @type {UserInfo}
     * @memberof BodyInfo
     */
    'userInfo'?: UserInfo;
}
/**
 * 
 * @export
 * @interface BodyInfoDto
 */
export interface BodyInfoDto {
    /**
     * 
     * @type {string}
     * @memberof BodyInfoDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof BodyInfoDto
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyInfoDto
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'content'?: string;
    /**
     * 
     * @type {Post}
     * @memberof Comment
     */
    'post'?: Post;
    /**
     * 
     * @type {Member}
     * @memberof Comment
     */
    'member'?: Member;
}
/**
 * 
 * @export
 * @interface CommentDto
 */
export interface CommentDto {
    /**
     * 
     * @type {number}
     * @memberof CommentDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommentDto
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof CommentDto
     */
    'userSeq'?: number;
}
/**
 * 
 * @export
 * @interface CommentsOfPostResponse
 */
export interface CommentsOfPostResponse {
    /**
     * 
     * @type {Array<CommentDto>}
     * @memberof CommentsOfPostResponse
     */
    'commentDtoList'?: Array<CommentDto>;
}
/**
 * 
 * @export
 * @interface FoundTrainer
 */
export interface FoundTrainer {
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'thumbNailUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof FoundTrainer
     */
    'trainerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'describe'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FoundTrainer
     */
    'categories'?: Array<FoundTrainerCategoriesEnum>;
}

export const FoundTrainerCategoriesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type FoundTrainerCategoriesEnum = typeof FoundTrainerCategoriesEnum[keyof typeof FoundTrainerCategoriesEnum];

/**
 * 
 * @export
 * @interface Goal
 */
export interface Goal {
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'goalType'?: GoalGoalTypeEnum;
    /**
     * 
     * @type {UserInfo}
     * @memberof Goal
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainingProgram}
     * @memberof Goal
     */
    'trainingProgram'?: TrainingProgram;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Goal
     */
    'trainerInfo'?: TrainerInfo;
}

export const GoalGoalTypeEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type GoalGoalTypeEnum = typeof GoalGoalTypeEnum[keyof typeof GoalGoalTypeEnum];

/**
 * 
 * @export
 * @interface Gym
 */
export interface Gym {
    /**
     * 
     * @type {number}
     * @memberof Gym
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'address'?: string;
    /**
     * 
     * @type {UserInfo}
     * @memberof Gym
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Gym
     */
    'trainerInfo'?: TrainerInfo;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'gymPhone'?: string;
}
/**
 * 
 * @export
 * @interface GymDto
 */
export interface GymDto {
    /**
     * 
     * @type {string}
     * @memberof GymDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GymDto
     */
    'address'?: string;
}
/**
 * End time in HH:mm format
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'nano'?: number;
}
/**
 * 
 * @export
 * @interface MealDTO
 */
export interface MealDTO {
    /**
     * 
     * @type {number}
     * @memberof MealDTO
     */
    'mealId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'memberName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'mealType'?: MealDTOMealTypeEnum;
}

export const MealDTOMealTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER'
} as const;

export type MealDTOMealTypeEnum = typeof MealDTOMealTypeEnum[keyof typeof MealDTOMealTypeEnum];

/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'userSeq'?: number;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'emailVerifiedYn': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'profileImageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'providerType': MemberProviderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'roleType': MemberRoleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'gender'?: MemberGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'modifiedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'phone': string;
    /**
     * 
     * @type {UserInfo}
     * @memberof Member
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Member
     */
    'trainerInfo'?: TrainerInfo;
}

export const MemberProviderTypeEnum = {
    Google: 'GOOGLE',
    Kakao: 'KAKAO',
    Github: 'GITHUB'
} as const;

export type MemberProviderTypeEnum = typeof MemberProviderTypeEnum[keyof typeof MemberProviderTypeEnum];
export const MemberRoleTypeEnum = {
    User: 'USER',
    Admin: 'ADMIN',
    Guest: 'GUEST'
} as const;

export type MemberRoleTypeEnum = typeof MemberRoleTypeEnum[keyof typeof MemberRoleTypeEnum];
export const MemberGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberGenderEnum = typeof MemberGenderEnum[keyof typeof MemberGenderEnum];

/**
 * 
 * @export
 * @interface MemberDTO
 */
export interface MemberDTO {
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'memberSeq'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'gender'?: MemberDTOGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'programName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'totalCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'remainingCnt'?: number;
}

export const MemberDTOGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberDTOGenderEnum = typeof MemberDTOGenderEnum[keyof typeof MemberDTOGenderEnum];

/**
 * 
 * @export
 * @interface MemberRegisterRequest
 */
export interface MemberRegisterRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberRegisterRequest
     */
    'goalTypes'?: Array<MemberRegisterRequestGoalTypesEnum>;
    /**
     * 
     * @type {string}
     * @memberof MemberRegisterRequest
     */
    'gender'?: MemberRegisterRequestGenderEnum;
    /**
     * 
     * @type {BodyInfoDto}
     * @memberof MemberRegisterRequest
     */
    'bodyInfoDto'?: BodyInfoDto;
    /**
     * 
     * @type {GymDto}
     * @memberof MemberRegisterRequest
     */
    'gymDto'?: GymDto;
    /**
     * 
     * @type {string}
     * @memberof MemberRegisterRequest
     */
    'exerciseLevel'?: MemberRegisterRequestExerciseLevelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MemberRegisterRequest
     */
    'agreeToReceive'?: boolean;
}

export const MemberRegisterRequestGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type MemberRegisterRequestGoalTypesEnum = typeof MemberRegisterRequestGoalTypesEnum[keyof typeof MemberRegisterRequestGoalTypesEnum];
export const MemberRegisterRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberRegisterRequestGenderEnum = typeof MemberRegisterRequestGenderEnum[keyof typeof MemberRegisterRequestGenderEnum];
export const MemberRegisterRequestExerciseLevelEnum = {
    Beginner: 'BEGINNER',
    Intermediate: 'INTERMEDIATE',
    Advanced: 'ADVANCED'
} as const;

export type MemberRegisterRequestExerciseLevelEnum = typeof MemberRegisterRequestExerciseLevelEnum[keyof typeof MemberRegisterRequestExerciseLevelEnum];

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'modifiedAt': string;
    /**
     * 
     * @type {Member}
     * @memberof Post
     */
    'user'?: Member;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Post
     */
    'comments'?: Array<Comment>;
    /**
     * 
     * @type {Array<S3Image>}
     * @memberof Post
     */
    'images'?: Array<S3Image>;
}
/**
 * 
 * @export
 * @interface PostCreateRequest
 */
export interface PostCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface Qualification
 */
export interface Qualification {
    /**
     * 
     * @type {number}
     * @memberof Qualification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'category'?: QualificationCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'description'?: string;
    /**
     * 
     * @type {S3Image}
     * @memberof Qualification
     */
    'image'?: S3Image;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Qualification
     */
    'trainerInfo'?: TrainerInfo;
}

export const QualificationCategoryEnum = {
    Certification: 'CERTIFICATION',
    Education: 'EDUCATION',
    Award: 'AWARD'
} as const;

export type QualificationCategoryEnum = typeof QualificationCategoryEnum[keyof typeof QualificationCategoryEnum];

/**
 * 
 * @export
 * @interface QualificationDto
 */
export interface QualificationDto {
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'category'?: QualificationDtoCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'description'?: string;
}

export const QualificationDtoCategoryEnum = {
    Certification: 'CERTIFICATION',
    Education: 'EDUCATION',
    Award: 'AWARD'
} as const;

export type QualificationDtoCategoryEnum = typeof QualificationDtoCategoryEnum[keyof typeof QualificationDtoCategoryEnum];

/**
 * 
 * @export
 * @interface S3Image
 */
export interface S3Image {
    /**
     * 
     * @type {number}
     * @memberof S3Image
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'uploadDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof S3Image
     */
    'fileSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'contentType'?: string;
    /**
     * 
     * @type {Qualification}
     * @memberof S3Image
     */
    'qualification'?: Qualification;
    /**
     * 
     * @type {TrainingProgram}
     * @memberof S3Image
     */
    'trainingProgram'?: TrainingProgram;
    /**
     * 
     * @type {Post}
     * @memberof S3Image
     */
    'post'?: Post;
}
/**
 * 
 * @export
 * @interface ScheduleDTO
 */
export interface ScheduleDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    'title'?: string;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDTO
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDTO
     */
    'endTime'?: LocalTime;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    'memberName'?: string;
}
/**
 * 
 * @export
 * @interface ScheduleDto
 */
export interface ScheduleDto {
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'dayOfWeek'?: ScheduleDtoDayOfWeekEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDto
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDto
     */
    'endTime'?: LocalTime;
}

export const ScheduleDtoDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type ScheduleDtoDayOfWeekEnum = typeof ScheduleDtoDayOfWeekEnum[keyof typeof ScheduleDtoDayOfWeekEnum];

/**
 * 
 * @export
 * @interface SearchTrainerResponse
 */
export interface SearchTrainerResponse {
    /**
     * 
     * @type {Array<FoundTrainer>}
     * @memberof SearchTrainerResponse
     */
    'trainers'?: Array<FoundTrainer>;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface TrainerInfo
 */
export interface TrainerInfo {
    /**
     * 
     * @type {number}
     * @memberof TrainerInfo
     */
    'id'?: number;
    /**
     * 
     * @type {Member}
     * @memberof TrainerInfo
     */
    'user'?: Member;
    /**
     * 
     * @type {Gym}
     * @memberof TrainerInfo
     */
    'gym'?: Gym;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof TrainerInfo
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {Array<Qualification>}
     * @memberof TrainerInfo
     */
    'qualificationList'?: Array<Qualification>;
    /**
     * 
     * @type {Array<TrainingProgram>}
     * @memberof TrainerInfo
     */
    'trainingProgramList'?: Array<TrainingProgram>;
    /**
     * 
     * @type {Array<TrainerSchedule>}
     * @memberof TrainerInfo
     */
    'trainerScheduleList'?: Array<TrainerSchedule>;
    /**
     * 
     * @type {string}
     * @memberof TrainerInfo
     */
    'profileDescription'?: string;
}
/**
 * 
 * @export
 * @interface TrainerMainPageResponse
 */
export interface TrainerMainPageResponse {
    /**
     * 
     * @type {Array<ScheduleDTO>}
     * @memberof TrainerMainPageResponse
     */
    'schedules'?: Array<ScheduleDTO>;
    /**
     * 
     * @type {Array<MealDTO>}
     * @memberof TrainerMainPageResponse
     */
    'meals'?: Array<MealDTO>;
    /**
     * 
     * @type {Array<MemberDTO>}
     * @memberof TrainerMainPageResponse
     */
    'members'?: Array<MemberDTO>;
}
/**
 * 
 * @export
 * @interface TrainerMyPageResponse
 */
export interface TrainerMyPageResponse {
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymPhone'?: string;
    /**
     * 
     * @type {Array<TrainerProgram>}
     * @memberof TrainerMyPageResponse
     */
    'trainingPrograms'?: Array<TrainerProgram>;
    /**
     * 
     * @type {Array<TrainerQualification>}
     * @memberof TrainerMyPageResponse
     */
    'trainerQualifications'?: Array<TrainerQualification>;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'profileImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface TrainerProgram
 */
export interface TrainerProgram {
    /**
     * 
     * @type {string}
     * @memberof TrainerProgram
     */
    'programTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerProgram
     */
    'programDescription'?: string;
}
/**
 * 
 * @export
 * @interface TrainerQualification
 */
export interface TrainerQualification {
    /**
     * 
     * @type {string}
     * @memberof TrainerQualification
     */
    'qualificationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerQualification
     */
    'startDate'?: string;
}
/**
 * 
 * @export
 * @interface TrainerRequest
 */
export interface TrainerRequest {
    /**
     * 
     * @type {GymDto}
     * @memberof TrainerRequest
     */
    'gymDto'?: GymDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainerRequest
     */
    'goalTypes'?: Array<TrainerRequestGoalTypesEnum>;
    /**
     * 
     * @type {Array<QualificationDto>}
     * @memberof TrainerRequest
     */
    'qualificationDtoList'?: Array<QualificationDto>;
    /**
     * 
     * @type {TrainingProgramDto}
     * @memberof TrainerRequest
     */
    'trainingProgramDto'?: TrainingProgramDto;
    /**
     * 
     * @type {Array<ScheduleDto>}
     * @memberof TrainerRequest
     */
    'scheduleDtoList'?: Array<ScheduleDto>;
    /**
     * 
     * @type {string}
     * @memberof TrainerRequest
     */
    'profileDescription'?: string;
}

export const TrainerRequestGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type TrainerRequestGoalTypesEnum = typeof TrainerRequestGoalTypesEnum[keyof typeof TrainerRequestGoalTypesEnum];

/**
 * 
 * @export
 * @interface TrainerSchedule
 */
export interface TrainerSchedule {
    /**
     * 
     * @type {number}
     * @memberof TrainerSchedule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainerSchedule
     */
    'dayOfWeek'?: TrainerScheduleDayOfWeekEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof TrainerSchedule
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof TrainerSchedule
     */
    'endTime'?: LocalTime;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof TrainerSchedule
     */
    'trainerInfo'?: TrainerInfo;
}

export const TrainerScheduleDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type TrainerScheduleDayOfWeekEnum = typeof TrainerScheduleDayOfWeekEnum[keyof typeof TrainerScheduleDayOfWeekEnum];

/**
 * 
 * @export
 * @interface TrainingProgram
 */
export interface TrainingProgram {
    /**
     * 
     * @type {number}
     * @memberof TrainingProgram
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgram
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgram
     */
    'description'?: string;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof TrainingProgram
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof TrainingProgram
     */
    'trainerInfo'?: TrainerInfo;
    /**
     * 
     * @type {Array<S3Image>}
     * @memberof TrainingProgram
     */
    'imageList'?: Array<S3Image>;
}
/**
 * 
 * @export
 * @interface TrainingProgramDto
 */
export interface TrainingProgramDto {
    /**
     * 
     * @type {string}
     * @memberof TrainingProgramDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgramDto
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainingProgramDto
     */
    'goalTypes'?: Array<TrainingProgramDtoGoalTypesEnum>;
}

export const TrainingProgramDtoGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type TrainingProgramDtoGoalTypesEnum = typeof TrainingProgramDtoGoalTypesEnum[keyof typeof TrainingProgramDtoGoalTypesEnum];

/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'id'?: number;
    /**
     * 
     * @type {Member}
     * @memberof UserInfo
     */
    'user'?: Member;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof UserInfo
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {BodyInfo}
     * @memberof UserInfo
     */
    'bodyInfo'?: BodyInfo;
    /**
     * 
     * @type {Gym}
     * @memberof UserInfo
     */
    'gym'?: Gym;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'exerciseLevel'?: UserInfoExerciseLevelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    'agreeToReceive'?: boolean;
}

export const UserInfoExerciseLevelEnum = {
    Beginner: 'BEGINNER',
    Intermediate: 'INTERMEDIATE',
    Advanced: 'ADVANCED'
} as const;

export type UserInfoExerciseLevelEnum = typeof UserInfoExerciseLevelEnum[keyof typeof UserInfoExerciseLevelEnum];

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'gender'?: UserResponseGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'profileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'roleType'?: UserResponseRoleTypeEnum;
}

export const UserResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserResponseGenderEnum = typeof UserResponseGenderEnum[keyof typeof UserResponseGenderEnum];
export const UserResponseRoleTypeEnum = {
    User: 'USER',
    Admin: 'ADMIN',
    Guest: 'GUEST'
} as const;

export type UserResponseRoleTypeEnum = typeof UserResponseRoleTypeEnum[keyof typeof UserResponseRoleTypeEnum];


/**
 * CommunityControllerApi - axios parameter creator
 * @export
 */
export const CommunityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (postId: number, content: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('createComment', 'postId', postId)
            // verify required parameter 'content' is not null or undefined
            assertParamExists('createComment', 'content', content)
            const localVarPath = `/api/v1/community/posts/{postId}/comments`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (data: PostCreateRequest, images?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createPost', 'data', data)
            const localVarPath = `/api/v1/community/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', new Blob([JSON.stringify(data)], { type: "application/json", }));
            }
                if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/community/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getCommentsByPost', 'postId', postId)
            const localVarPath = `/api/v1/community/posts/{postId}/comments`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommunityControllerApi - functional programming interface
 * @export
 */
export const CommunityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommunityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(postId: number, content: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(postId, content, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityControllerApi.createComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(data: PostCreateRequest, images?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(data, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityControllerApi.createPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPosts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityControllerApi.getAllPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentsByPost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsOfPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentsByPost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityControllerApi.getCommentsByPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommunityControllerApi - factory interface
 * @export
 */
export const CommunityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommunityControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(postId: number, content: string, options?: any): AxiosPromise<string> {
            return localVarFp.createComment(postId, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(data: PostCreateRequest, images?: Array<File>, options?: any): AxiosPromise<string> {
            return localVarFp.createPost(data, images, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts(options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.getAllPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPost(postId: number, options?: any): AxiosPromise<CommentsOfPostResponse> {
            return localVarFp.getCommentsByPost(postId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommunityControllerApi - object-oriented interface
 * @export
 * @class CommunityControllerApi
 * @extends {BaseAPI}
 */
export class CommunityControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} postId 
     * @param {string} content 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityControllerApi
     */
    public createComment(postId: number, content: string, options?: RawAxiosRequestConfig) {
        return CommunityControllerApiFp(this.configuration).createComment(postId, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostCreateRequest} data 
     * @param {Array<File>} [images] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityControllerApi
     */
    public createPost(data: PostCreateRequest, images?: Array<File>, options?: RawAxiosRequestConfig) {
        return CommunityControllerApiFp(this.configuration).createPost(data, images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityControllerApi
     */
    public getAllPosts(options?: RawAxiosRequestConfig) {
        return CommunityControllerApiFp(this.configuration).getAllPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityControllerApi
     */
    public getCommentsByPost(postId: number, options?: RawAxiosRequestConfig) {
        return CommunityControllerApiFp(this.configuration).getCommentsByPost(postId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TrainerControllerApi - axios parameter creator
 * @export
 */
export const TrainerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainTrainer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPageTrainer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/mypage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TrainerRequest} data 
         * @param {Array<File>} qualificationImages 
         * @param {Array<File>} trainingProgramImages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTrainer: async (data: TrainerRequest, qualificationImages: Array<File>, trainingProgramImages: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('registerTrainer', 'data', data)
            // verify required parameter 'qualificationImages' is not null or undefined
            assertParamExists('registerTrainer', 'qualificationImages', qualificationImages)
            // verify required parameter 'trainingProgramImages' is not null or undefined
            assertParamExists('registerTrainer', 'trainingProgramImages', trainingProgramImages)
            const localVarPath = `/api/v1/trainer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', new Blob([JSON.stringify(data)], { type: "application/json", }));
            }
                if (qualificationImages) {
                qualificationImages.forEach((element) => {
                    localVarFormParams.append('qualificationImages', element as any);
                })
            }

                if (trainingProgramImages) {
                trainingProgramImages.forEach((element) => {
                    localVarFormParams.append('trainingProgramImages', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTrainers: async (keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyWord !== undefined) {
                localVarQueryParameter['keyWord'] = keyWord;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainerControllerApi - functional programming interface
 * @export
 */
export const TrainerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainTrainer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMainPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainTrainer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.mainTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPageTrainer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMyPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPageTrainer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.myPageTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TrainerRequest} data 
         * @param {Array<File>} qualificationImages 
         * @param {Array<File>} trainingProgramImages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerTrainer(data: TrainerRequest, qualificationImages: Array<File>, trainingProgramImages: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerTrainer(data, qualificationImages, trainingProgramImages, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.registerTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTrainerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTrainers(keyWord, category, location, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.searchTrainers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrainerControllerApi - factory interface
 * @export
 */
export const TrainerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainTrainer(options?: any): AxiosPromise<TrainerMainPageResponse> {
            return localVarFp.mainTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPageTrainer(options?: any): AxiosPromise<TrainerMyPageResponse> {
            return localVarFp.myPageTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TrainerRequest} data 
         * @param {Array<File>} qualificationImages 
         * @param {Array<File>} trainingProgramImages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTrainer(data: TrainerRequest, qualificationImages: Array<File>, trainingProgramImages: Array<File>, options?: any): AxiosPromise<string> {
            return localVarFp.registerTrainer(data, qualificationImages, trainingProgramImages, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: any): AxiosPromise<SearchTrainerResponse> {
            return localVarFp.searchTrainers(keyWord, category, location, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainerControllerApi - object-oriented interface
 * @export
 * @class TrainerControllerApi
 * @extends {BaseAPI}
 */
export class TrainerControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public mainTrainer(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).mainTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public myPageTrainer(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).myPageTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainerRequest} data 
     * @param {Array<File>} qualificationImages 
     * @param {Array<File>} trainingProgramImages 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public registerTrainer(data: TrainerRequest, qualificationImages: Array<File>, trainingProgramImages: Array<File>, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).registerTrainer(data, qualificationImages, trainingProgramImages, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [keyWord] 
     * @param {SearchTrainersCategoryEnum} [category] 
     * @param {string} [location] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).searchTrainers(keyWord, category, location, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchTrainersCategoryEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;
export type SearchTrainersCategoryEnum = typeof SearchTrainersCategoryEnum[keyof typeof SearchTrainersCategoryEnum];


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember: async (memberRegisterRequest: MemberRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberRegisterRequest' is not null or undefined
            assertParamExists('registerMember', 'memberRegisterRequest', memberRegisterRequest)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerMember(memberRegisterRequest: MemberRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerMember(memberRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.registerMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember(memberRegisterRequest: MemberRegisterRequest, options?: any): AxiosPromise<string> {
            return localVarFp.registerMember(memberRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MemberRegisterRequest} memberRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public registerMember(memberRegisterRequest: MemberRegisterRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).registerMember(memberRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



