/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BodyInfo
 */
export interface BodyInfo {
    /**
     * 
     * @type {string}
     * @memberof BodyInfo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyInfo
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyInfo
     */
    'weight'?: number;
    /**
     * 
     * @type {UserInfo}
     * @memberof BodyInfo
     */
    'userInfo'?: UserInfo;
}
/**
 * 
 * @export
 * @interface BodyInfoDto
 */
export interface BodyInfoDto {
    /**
     * 
     * @type {string}
     * @memberof BodyInfoDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof BodyInfoDto
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyInfoDto
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface ChatRoomInfo
 */
export interface ChatRoomInfo {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomInfo
     */
    'chatRoomId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomInfo
     */
    'lastChatMsg'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomInfo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomInfo
     */
    'chatRoomUser'?: string;
}
/**
 * 
 * @export
 * @interface ChatRoomsResponse
 */
export interface ChatRoomsResponse {
    /**
     * 
     * @type {Array<ChatRoomInfo>}
     * @memberof ChatRoomsResponse
     */
    'chatRooms'?: Array<ChatRoomInfo>;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'content'?: string;
    /**
     * 
     * @type {Post}
     * @memberof Comment
     */
    'post'?: Post;
    /**
     * 
     * @type {Member}
     * @memberof Comment
     */
    'member'?: Member;
}
/**
 * 
 * @export
 * @interface CommentDto
 */
export interface CommentDto {
    /**
     * 
     * @type {string}
     * @memberof CommentDto
     */
    'profileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentDto
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface CommentsOfPostResponse
 */
export interface CommentsOfPostResponse {
    /**
     * 
     * @type {Array<CommentDto>}
     * @memberof CommentsOfPostResponse
     */
    'commentDtoList'?: Array<CommentDto>;
}
/**
 * 
 * @export
 * @interface CreateOrGetResponse
 */
export interface CreateOrGetResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateOrGetResponse
     */
    'chatRoomId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetResponse
     */
    'createAt'?: string;
}
/**
 * 
 * @export
 * @interface CurrentProgram
 */
export interface CurrentProgram {
    /**
     * 
     * @type {string}
     * @memberof CurrentProgram
     */
    'programName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CurrentProgram
     */
    'totalCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof CurrentProgram
     */
    'remainingCnt'?: number;
}
/**
 * 
 * @export
 * @interface DailyMealDto
 */
export interface DailyMealDto {
    /**
     * 
     * @type {Array<MealDto>}
     * @memberof DailyMealDto
     */
    'mealDtoList'?: Array<MealDto>;
}
/**
 * 
 * @export
 * @interface FoundTrainer
 */
export interface FoundTrainer {
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'thumbNailUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof FoundTrainer
     */
    'trainerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoundTrainer
     */
    'describe'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FoundTrainer
     */
    'categories'?: Array<FoundTrainerCategoriesEnum>;
}

export const FoundTrainerCategoriesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type FoundTrainerCategoriesEnum = typeof FoundTrainerCategoriesEnum[keyof typeof FoundTrainerCategoriesEnum];

/**
 * 
 * @export
 * @interface GetMessage
 */
export interface GetMessage {
    /**
     * 
     * @type {string}
     * @memberof GetMessage
     */
    'senderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMessage
     */
    'senderName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMessage
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMessage
     */
    'sendAt'?: string;
}
/**
 * 
 * @export
 * @interface Goal
 */
export interface Goal {
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'goalType'?: GoalGoalTypeEnum;
    /**
     * 
     * @type {UserInfo}
     * @memberof Goal
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainingProgram}
     * @memberof Goal
     */
    'trainingProgram'?: TrainingProgram;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Goal
     */
    'trainerInfo'?: TrainerInfo;
}

export const GoalGoalTypeEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type GoalGoalTypeEnum = typeof GoalGoalTypeEnum[keyof typeof GoalGoalTypeEnum];

/**
 * 
 * @export
 * @interface Gym
 */
export interface Gym {
    /**
     * 
     * @type {number}
     * @memberof Gym
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'address'?: string;
    /**
     * 
     * @type {UserInfo}
     * @memberof Gym
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Gym
     */
    'trainerInfo'?: TrainerInfo;
    /**
     * 
     * @type {string}
     * @memberof Gym
     */
    'gymPhone'?: string;
}
/**
 * 
 * @export
 * @interface GymDto
 */
export interface GymDto {
    /**
     * 
     * @type {string}
     * @memberof GymDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GymDto
     */
    'address'?: string;
}
/**
 * End time in HH:mm format
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'nano'?: number;
}
/**
 * 
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'mealType'?: MealMealTypeEnum;
    /**
     * 
     * @type {Member}
     * @memberof Meal
     */
    'member'?: Member;
    /**
     * 
     * @type {Comment}
     * @memberof Meal
     */
    'comment'?: Comment;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    'date'?: string;
    /**
     * 
     * @type {S3Image}
     * @memberof Meal
     */
    'image'?: S3Image;
}

export const MealMealTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER'
} as const;

export type MealMealTypeEnum = typeof MealMealTypeEnum[keyof typeof MealMealTypeEnum];

/**
 * 
 * @export
 * @interface MealDTO
 */
export interface MealDTO {
    /**
     * 
     * @type {number}
     * @memberof MealDTO
     */
    'mealId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'memberName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDTO
     */
    'mealType'?: MealDTOMealTypeEnum;
}

export const MealDTOMealTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER'
} as const;

export type MealDTOMealTypeEnum = typeof MealDTOMealTypeEnum[keyof typeof MealDTOMealTypeEnum];

/**
 * 
 * @export
 * @interface MealDto
 */
export interface MealDto {
    /**
     * 
     * @type {number}
     * @memberof MealDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof MealDto
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface MealPlanResponse
 */
export interface MealPlanResponse {
    /**
     * 
     * @type {string}
     * @memberof MealPlanResponse
     */
    'mealType'?: MealPlanResponseMealTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MealPlanResponse
     */
    'title'?: string;
    /**
     * 
     * @type {CommentDto}
     * @memberof MealPlanResponse
     */
    'o'?: CommentDto;
    /**
     * 
     * @type {string}
     * @memberof MealPlanResponse
     */
    'date'?: string;
}

export const MealPlanResponseMealTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER'
} as const;

export type MealPlanResponseMealTypeEnum = typeof MealPlanResponseMealTypeEnum[keyof typeof MealPlanResponseMealTypeEnum];

/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'userSeq'?: number;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'emailVerifiedYn': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'profileImageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'providerType': MemberProviderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'roleType': MemberRoleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'gender'?: MemberGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'modifiedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'phone': string;
    /**
     * 
     * @type {UserInfo}
     * @memberof Member
     */
    'userInfo'?: UserInfo;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Member
     */
    'trainerInfo'?: TrainerInfo;
}

export const MemberProviderTypeEnum = {
    Google: 'GOOGLE',
    Kakao: 'KAKAO',
    Github: 'GITHUB'
} as const;

export type MemberProviderTypeEnum = typeof MemberProviderTypeEnum[keyof typeof MemberProviderTypeEnum];
export const MemberRoleTypeEnum = {
    User: 'USER',
    Admin: 'ADMIN',
    Guest: 'GUEST'
} as const;

export type MemberRoleTypeEnum = typeof MemberRoleTypeEnum[keyof typeof MemberRoleTypeEnum];
export const MemberGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberGenderEnum = typeof MemberGenderEnum[keyof typeof MemberGenderEnum];

/**
 * 
 * @export
 * @interface MemberBodyInfo
 */
export interface MemberBodyInfo {
    /**
     * 
     * @type {number}
     * @memberof MemberBodyInfo
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberBodyInfo
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface MemberDTO
 */
export interface MemberDTO {
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'memberSeq'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'gender'?: MemberDTOGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberDTO
     */
    'programName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'totalCnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberDTO
     */
    'remainingCnt'?: number;
}

export const MemberDTOGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberDTOGenderEnum = typeof MemberDTOGenderEnum[keyof typeof MemberDTOGenderEnum];

/**
 * 
 * @export
 * @interface MemberRegisterRequest
 */
export interface MemberRegisterRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberRegisterRequest
     */
    'goalTypes'?: Array<MemberRegisterRequestGoalTypesEnum>;
    /**
     * 
     * @type {string}
     * @memberof MemberRegisterRequest
     */
    'gender'?: MemberRegisterRequestGenderEnum;
    /**
     * 
     * @type {BodyInfoDto}
     * @memberof MemberRegisterRequest
     */
    'bodyInfoDto'?: BodyInfoDto;
    /**
     * 
     * @type {GymDto}
     * @memberof MemberRegisterRequest
     */
    'gymDto'?: GymDto;
    /**
     * 
     * @type {string}
     * @memberof MemberRegisterRequest
     */
    'exerciseLevel'?: MemberRegisterRequestExerciseLevelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MemberRegisterRequest
     */
    'agreeToReceive'?: boolean;
}

export const MemberRegisterRequestGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type MemberRegisterRequestGoalTypesEnum = typeof MemberRegisterRequestGoalTypesEnum[keyof typeof MemberRegisterRequestGoalTypesEnum];
export const MemberRegisterRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type MemberRegisterRequestGenderEnum = typeof MemberRegisterRequestGenderEnum[keyof typeof MemberRegisterRequestGenderEnum];
export const MemberRegisterRequestExerciseLevelEnum = {
    Beginner: 'BEGINNER',
    Intermediate: 'INTERMEDIATE',
    Advanced: 'ADVANCED'
} as const;

export type MemberRegisterRequestExerciseLevelEnum = typeof MemberRegisterRequestExerciseLevelEnum[keyof typeof MemberRegisterRequestExerciseLevelEnum];

/**
 * 
 * @export
 * @interface MessageListResponse
 */
export interface MessageListResponse {
    /**
     * 
     * @type {Array<GetMessage>}
     * @memberof MessageListResponse
     */
    'messages'?: Array<GetMessage>;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'modifiedAt': string;
    /**
     * 
     * @type {Member}
     * @memberof Post
     */
    'user'?: Member;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Post
     */
    'comments'?: Array<Comment>;
    /**
     * 
     * @type {Array<S3Image>}
     * @memberof Post
     */
    'images'?: Array<S3Image>;
}
/**
 * 
 * @export
 * @interface PostCreateRequest
 */
export interface PostCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface ProgramListResponse
 */
export interface ProgramListResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProgramListResponse
     */
    'ticketTitleList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Qualification
 */
export interface Qualification {
    /**
     * 
     * @type {number}
     * @memberof Qualification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'category'?: QualificationCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'description'?: string;
    /**
     * 
     * @type {S3Image}
     * @memberof Qualification
     */
    'image'?: S3Image;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof Qualification
     */
    'trainerInfo'?: TrainerInfo;
}

export const QualificationCategoryEnum = {
    Certification: 'CERTIFICATION',
    Education: 'EDUCATION',
    Award: 'AWARD'
} as const;

export type QualificationCategoryEnum = typeof QualificationCategoryEnum[keyof typeof QualificationCategoryEnum];

/**
 * 
 * @export
 * @interface QualificationDto
 */
export interface QualificationDto {
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'category'?: QualificationDtoCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationDto
     */
    'description'?: string;
}

export const QualificationDtoCategoryEnum = {
    Certification: 'CERTIFICATION',
    Education: 'EDUCATION',
    Award: 'AWARD'
} as const;

export type QualificationDtoCategoryEnum = typeof QualificationDtoCategoryEnum[keyof typeof QualificationDtoCategoryEnum];

/**
 * 
 * @export
 * @interface ReviewMealRequest
 */
export interface ReviewMealRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewMealRequest
     */
    'mealID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewMealRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface S3Image
 */
export interface S3Image {
    /**
     * 
     * @type {number}
     * @memberof S3Image
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'uploadDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof S3Image
     */
    'fileSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof S3Image
     */
    'contentType'?: string;
    /**
     * 
     * @type {Qualification}
     * @memberof S3Image
     */
    'qualification'?: Qualification;
    /**
     * 
     * @type {TrainingProgram}
     * @memberof S3Image
     */
    'trainingProgram'?: TrainingProgram;
    /**
     * 
     * @type {Post}
     * @memberof S3Image
     */
    'post'?: Post;
    /**
     * 
     * @type {Meal}
     * @memberof S3Image
     */
    'meal'?: Meal;
}
/**
 * 
 * @export
 * @interface ScheduleDTO
 */
export interface ScheduleDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    'title'?: string;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDTO
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDTO
     */
    'endTime'?: LocalTime;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    'memberName'?: string;
}
/**
 * 
 * @export
 * @interface ScheduleDto
 */
export interface ScheduleDto {
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'dayOfWeek'?: ScheduleDtoDayOfWeekEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDto
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof ScheduleDto
     */
    'endTime'?: LocalTime;
}

export const ScheduleDtoDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type ScheduleDtoDayOfWeekEnum = typeof ScheduleDtoDayOfWeekEnum[keyof typeof ScheduleDtoDayOfWeekEnum];

/**
 * 
 * @export
 * @interface SearchTrainerResponse
 */
export interface SearchTrainerResponse {
    /**
     * 
     * @type {Array<FoundTrainer>}
     * @memberof SearchTrainerResponse
     */
    'trainers'?: Array<FoundTrainer>;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchTrainerResponse
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface TicketRegisterRequest
 */
export interface TicketRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketRegisterRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketRegisterRequest
     */
    'programName'?: string;
    /**
     * 
     * @type {number}
     * @memberof TicketRegisterRequest
     */
    'totalCnt'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketRegisterRequest
     */
    'endPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketRegisterRequest
     */
    'memo'?: string;
}
/**
 * 
 * @export
 * @interface TrainerInfo
 */
export interface TrainerInfo {
    /**
     * 
     * @type {number}
     * @memberof TrainerInfo
     */
    'id'?: number;
    /**
     * 
     * @type {Member}
     * @memberof TrainerInfo
     */
    'user'?: Member;
    /**
     * 
     * @type {Gym}
     * @memberof TrainerInfo
     */
    'gym'?: Gym;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof TrainerInfo
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {Array<Qualification>}
     * @memberof TrainerInfo
     */
    'qualificationList'?: Array<Qualification>;
    /**
     * 
     * @type {Array<TrainingProgram>}
     * @memberof TrainerInfo
     */
    'trainingProgramList'?: Array<TrainingProgram>;
    /**
     * 
     * @type {Array<TrainerSchedule>}
     * @memberof TrainerInfo
     */
    'trainerScheduleList'?: Array<TrainerSchedule>;
    /**
     * 
     * @type {string}
     * @memberof TrainerInfo
     */
    'profileDescription'?: string;
}
/**
 * 
 * @export
 * @interface TrainerMainPageResponse
 */
export interface TrainerMainPageResponse {
    /**
     * 
     * @type {Array<ScheduleDTO>}
     * @memberof TrainerMainPageResponse
     */
    'schedules'?: Array<ScheduleDTO>;
    /**
     * 
     * @type {Array<MealDTO>}
     * @memberof TrainerMainPageResponse
     */
    'meals'?: Array<MealDTO>;
    /**
     * 
     * @type {Array<MemberDTO>}
     * @memberof TrainerMainPageResponse
     */
    'members'?: Array<MemberDTO>;
}
/**
 * 
 * @export
 * @interface TrainerMemberDetailManagementResponse
 */
export interface TrainerMemberDetailManagementResponse {
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'gender'?: TrainerMemberDetailManagementResponseGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'profileUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'phone'?: string;
    /**
     * 
     * @type {Array<MemberBodyInfo>}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'memberBodyInfoList'?: Array<MemberBodyInfo>;
    /**
     * 
     * @type {Array<CurrentProgram>}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'currentProgramList'?: Array<CurrentProgram>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainerMemberDetailManagementResponse
     */
    'memos'?: Array<string>;
}

export const TrainerMemberDetailManagementResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type TrainerMemberDetailManagementResponseGenderEnum = typeof TrainerMemberDetailManagementResponseGenderEnum[keyof typeof TrainerMemberDetailManagementResponseGenderEnum];

/**
 * 
 * @export
 * @interface TrainerMemberManagementResponse
 */
export interface TrainerMemberManagementResponse {
    /**
     * 
     * @type {Array<MemberDTO>}
     * @memberof TrainerMemberManagementResponse
     */
    'members'?: Array<MemberDTO>;
}
/**
 * 
 * @export
 * @interface TrainerMemberMealsResponse
 */
export interface TrainerMemberMealsResponse {
    /**
     * 
     * @type {number}
     * @memberof TrainerMemberMealsResponse
     */
    'memberSeq'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberMealsResponse
     */
    'memberName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberMealsResponse
     */
    'mealTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberMealsResponse
     */
    'mealType'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMemberMealsResponse
     */
    'isComment'?: string;
}
/**
 * 
 * @export
 * @interface TrainerMyPageResponse
 */
export interface TrainerMyPageResponse {
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'trainerPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'gymPhone'?: string;
    /**
     * 
     * @type {Array<TrainerProgram>}
     * @memberof TrainerMyPageResponse
     */
    'trainingPrograms'?: Array<TrainerProgram>;
    /**
     * 
     * @type {Array<TrainerQualification>}
     * @memberof TrainerMyPageResponse
     */
    'trainerQualifications'?: Array<TrainerQualification>;
    /**
     * 
     * @type {string}
     * @memberof TrainerMyPageResponse
     */
    'profileImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface TrainerProgram
 */
export interface TrainerProgram {
    /**
     * 
     * @type {string}
     * @memberof TrainerProgram
     */
    'programTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerProgram
     */
    'programDescription'?: string;
}
/**
 * 
 * @export
 * @interface TrainerQualification
 */
export interface TrainerQualification {
    /**
     * 
     * @type {string}
     * @memberof TrainerQualification
     */
    'qualificationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainerQualification
     */
    'startDate'?: string;
}
/**
 * 
 * @export
 * @interface TrainerRequest
 */
export interface TrainerRequest {
    /**
     * 
     * @type {GymDto}
     * @memberof TrainerRequest
     */
    'gymDto'?: GymDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainerRequest
     */
    'goalTypes'?: Array<TrainerRequestGoalTypesEnum>;
    /**
     * 
     * @type {QualificationDto}
     * @memberof TrainerRequest
     */
    'qualificationDto'?: QualificationDto;
    /**
     * 
     * @type {TrainingProgramDto}
     * @memberof TrainerRequest
     */
    'trainingProgramDto'?: TrainingProgramDto;
    /**
     * 
     * @type {Array<ScheduleDto>}
     * @memberof TrainerRequest
     */
    'scheduleDtoList'?: Array<ScheduleDto>;
    /**
     * 
     * @type {string}
     * @memberof TrainerRequest
     */
    'profileDescription'?: string;
}

export const TrainerRequestGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type TrainerRequestGoalTypesEnum = typeof TrainerRequestGoalTypesEnum[keyof typeof TrainerRequestGoalTypesEnum];

/**
 * 
 * @export
 * @interface TrainerSchedule
 */
export interface TrainerSchedule {
    /**
     * 
     * @type {number}
     * @memberof TrainerSchedule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainerSchedule
     */
    'dayOfWeek'?: TrainerScheduleDayOfWeekEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof TrainerSchedule
     */
    'startTime'?: LocalTime;
    /**
     * 
     * @type {LocalTime}
     * @memberof TrainerSchedule
     */
    'endTime'?: LocalTime;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof TrainerSchedule
     */
    'trainerInfo'?: TrainerInfo;
}

export const TrainerScheduleDayOfWeekEnum = {
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY',
    Sunday: 'SUNDAY'
} as const;

export type TrainerScheduleDayOfWeekEnum = typeof TrainerScheduleDayOfWeekEnum[keyof typeof TrainerScheduleDayOfWeekEnum];

/**
 * 
 * @export
 * @interface TrainingProgram
 */
export interface TrainingProgram {
    /**
     * 
     * @type {number}
     * @memberof TrainingProgram
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgram
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgram
     */
    'description'?: string;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof TrainingProgram
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {TrainerInfo}
     * @memberof TrainingProgram
     */
    'trainerInfo'?: TrainerInfo;
    /**
     * 
     * @type {Array<S3Image>}
     * @memberof TrainingProgram
     */
    'imageList'?: Array<S3Image>;
}
/**
 * 
 * @export
 * @interface TrainingProgramDto
 */
export interface TrainingProgramDto {
    /**
     * 
     * @type {string}
     * @memberof TrainingProgramDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainingProgramDto
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainingProgramDto
     */
    'goalTypes'?: Array<TrainingProgramDtoGoalTypesEnum>;
}

export const TrainingProgramDtoGoalTypesEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;

export type TrainingProgramDtoGoalTypesEnum = typeof TrainingProgramDtoGoalTypesEnum[keyof typeof TrainingProgramDtoGoalTypesEnum];

/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'id'?: number;
    /**
     * 
     * @type {Member}
     * @memberof UserInfo
     */
    'user'?: Member;
    /**
     * 
     * @type {Array<Goal>}
     * @memberof UserInfo
     */
    'goalList'?: Array<Goal>;
    /**
     * 
     * @type {Array<BodyInfo>}
     * @memberof UserInfo
     */
    'bodyInfoList'?: Array<BodyInfo>;
    /**
     * 
     * @type {Gym}
     * @memberof UserInfo
     */
    'gym'?: Gym;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'exerciseLevel'?: UserInfoExerciseLevelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    'agreeToReceive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'birthDate'?: string;
}

export const UserInfoExerciseLevelEnum = {
    Beginner: 'BEGINNER',
    Intermediate: 'INTERMEDIATE',
    Advanced: 'ADVANCED'
} as const;

export type UserInfoExerciseLevelEnum = typeof UserInfoExerciseLevelEnum[keyof typeof UserInfoExerciseLevelEnum];

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'gender'?: UserResponseGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'profileImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'roleType'?: UserResponseRoleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username'?: string;
}

export const UserResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserResponseGenderEnum = typeof UserResponseGenderEnum[keyof typeof UserResponseGenderEnum];
export const UserResponseRoleTypeEnum = {
    User: 'USER',
    Admin: 'ADMIN',
    Guest: 'GUEST'
} as const;

export type UserResponseRoleTypeEnum = typeof UserResponseRoleTypeEnum[keyof typeof UserResponseRoleTypeEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 주어진 게시물 ID와 내용으로 새 댓글을 생성합니다.
         * @summary 새 댓글 생성
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (postId: number, content: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('createComment', 'postId', postId)
            // verify required parameter 'content' is not null or undefined
            assertParamExists('createComment', 'content', content)
            const localVarPath = `/api/v1/community/posts/{postId}/comments`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 주어진 데이터와 선택적인 이미지를 사용하여 새 게시물을 생성합니다.
         * @summary 새 게시물 생성
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (data: PostCreateRequest, images?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createPost', 'data', data)
            const localVarPath = `/api/v1/community/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', new Blob([JSON.stringify(data)], { type: "application/json", }));
            }
                if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 게시물의 목록을 조회합니다.
         * @summary 모든 게시물 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/community/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 주어진 게시물 ID로 해당 게시물의 모든 댓글을 조회합니다.
         * @summary 게시물의 모든 댓글 조회
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getCommentsByPost', 'postId', postId)
            const localVarPath = `/api/v1/community/posts/{postId}/comments`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 주어진 게시물 ID와 내용으로 새 댓글을 생성합니다.
         * @summary 새 댓글 생성
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(postId: number, content: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(postId, content, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 주어진 데이터와 선택적인 이미지를 사용하여 새 게시물을 생성합니다.
         * @summary 새 게시물 생성
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(data: PostCreateRequest, images?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(data, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 모든 게시물의 목록을 조회합니다.
         * @summary 모든 게시물 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPosts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 주어진 게시물 ID로 해당 게시물의 모든 댓글을 조회합니다.
         * @summary 게시물의 모든 댓글 조회
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentsByPost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsOfPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentsByPost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCommentsByPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 주어진 게시물 ID와 내용으로 새 댓글을 생성합니다.
         * @summary 새 댓글 생성
         * @param {number} postId 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(postId: number, content: string, options?: any): AxiosPromise<string> {
            return localVarFp.createComment(postId, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 주어진 데이터와 선택적인 이미지를 사용하여 새 게시물을 생성합니다.
         * @summary 새 게시물 생성
         * @param {PostCreateRequest} data 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(data: PostCreateRequest, images?: Array<File>, options?: any): AxiosPromise<string> {
            return localVarFp.createPost(data, images, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 게시물의 목록을 조회합니다.
         * @summary 모든 게시물 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts(options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.getAllPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 주어진 게시물 ID로 해당 게시물의 모든 댓글을 조회합니다.
         * @summary 게시물의 모든 댓글 조회
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentsByPost(postId: number, options?: any): AxiosPromise<CommentsOfPostResponse> {
            return localVarFp.getCommentsByPost(postId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 주어진 게시물 ID와 내용으로 새 댓글을 생성합니다.
     * @summary 새 댓글 생성
     * @param {number} postId 
     * @param {string} content 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createComment(postId: number, content: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createComment(postId, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 주어진 데이터와 선택적인 이미지를 사용하여 새 게시물을 생성합니다.
     * @summary 새 게시물 생성
     * @param {PostCreateRequest} data 
     * @param {Array<File>} [images] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPost(data: PostCreateRequest, images?: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPost(data, images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 게시물의 목록을 조회합니다.
     * @summary 모든 게시물 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllPosts(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 주어진 게시물 ID로 해당 게시물의 모든 댓글을 조회합니다.
     * @summary 게시물의 모든 댓글 조회
     * @param {number} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCommentsByPost(postId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCommentsByPost(postId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatControllerApi - axios parameter creator
 * @export
 */
export const ChatControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMessages: async (chatRoomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('getChatMessages', 'chatRoomId', chatRoomId)
            const localVarPath = `/api/chat/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} trainerInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateChatRoom: async (trainerInfoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trainerInfoId' is not null or undefined
            assertParamExists('getOrCreateChatRoom', 'trainerInfoId', trainerInfoId)
            const localVarPath = `/api/chat/create-or-get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (trainerInfoId !== undefined) {
                localVarQueryParameter['trainerInfoId'] = trainerInfoId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatRooms: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/member/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChatRoom: async (chatRoomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('leaveChatRoom', 'chatRoomId', chatRoomId)
            const localVarPath = `/api/chat/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chatRoomId !== undefined) {
                localVarQueryParameter['chatRoomId'] = chatRoomId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatControllerApi - functional programming interface
 * @export
 */
export const ChatControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatMessages(chatRoomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatMessages(chatRoomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatControllerApi.getChatMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} trainerInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrCreateChatRoom(trainerInfoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateChatRoom(trainerInfoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatControllerApi.getOrCreateChatRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserChatRooms(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoomsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserChatRooms(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatControllerApi.getUserChatRooms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveChatRoom(chatRoomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveChatRoom(chatRoomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatControllerApi.leaveChatRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatControllerApi - factory interface
 * @export
 */
export const ChatControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatMessages(chatRoomId: number, options?: any): AxiosPromise<MessageListResponse> {
            return localVarFp.getChatMessages(chatRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} trainerInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateChatRoom(trainerInfoId: number, options?: any): AxiosPromise<CreateOrGetResponse> {
            return localVarFp.getOrCreateChatRoom(trainerInfoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatRooms(options?: any): AxiosPromise<ChatRoomsResponse> {
            return localVarFp.getUserChatRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} chatRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChatRoom(chatRoomId: number, options?: any): AxiosPromise<void> {
            return localVarFp.leaveChatRoom(chatRoomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatControllerApi - object-oriented interface
 * @export
 * @class ChatControllerApi
 * @extends {BaseAPI}
 */
export class ChatControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} chatRoomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApi
     */
    public getChatMessages(chatRoomId: number, options?: RawAxiosRequestConfig) {
        return ChatControllerApiFp(this.configuration).getChatMessages(chatRoomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} trainerInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApi
     */
    public getOrCreateChatRoom(trainerInfoId: number, options?: RawAxiosRequestConfig) {
        return ChatControllerApiFp(this.configuration).getOrCreateChatRoom(trainerInfoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApi
     */
    public getUserChatRooms(options?: RawAxiosRequestConfig) {
        return ChatControllerApiFp(this.configuration).getUserChatRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} chatRoomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatControllerApi
     */
    public leaveChatRoom(chatRoomId: number, options?: RawAxiosRequestConfig) {
        return ChatControllerApiFp(this.configuration).leaveChatRoom(chatRoomId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TrainerControllerApi - axios parameter creator
 * @export
 */
export const TrainerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 회원 아이디로 회원 이름을 확인합니다.
         * @summary 회원 확인
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMember: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/checkmember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 식단 ID로 식단 계획을 조회합니다.
         * @summary 식단 계획 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlan: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMealPlan', 'id', id)
            const localVarPath = `/api/v1/trainer/meal/review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersMeal: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getMembersMeal', 'date', date)
            const localVarPath = `/api/v1/trainer/members/meal/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 트레이너의 메인 페이지 정보를 조회합니다.
         * @summary 트레이너 메인 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainTrainer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 트레이너의 회원 상세 정보를 조회합니다.
         * @summary 회원 상세 관리
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberDetailManagementTrainer: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/members/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 트레이너의 회원 관리를 조회합니다.
         * @summary 회원 관리
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberManagementTrainer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 트레이너의 마이 페이지 정보를 조회합니다.
         * @summary 트레이너 마이 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPageTrainer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/mypage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트레이너가 새로운 티켓을 등록합니다.
         * @summary 티켓 등록
         * @param {TicketRegisterRequest} ticketRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTicket: async (ticketRegisterRequest: TicketRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketRegisterRequest' is not null or undefined
            assertParamExists('registerTicket', 'ticketRegisterRequest', ticketRegisterRequest)
            const localVarPath = `/api/v1/trainer/ticket/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트레이너의 티켓 등록 페이지 정보를 조회합니다.
         * @summary 티켓 등록 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTicketPage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/ticket/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트레이너 정보를 등록합니다.
         * @summary 트레이너 등록
         * @param {TrainerRequest} data 
         * @param {File} qualificationImage 
         * @param {File} trainingProgramImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTrainer: async (data: TrainerRequest, qualificationImage: File, trainingProgramImage: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('registerTrainer', 'data', data)
            // verify required parameter 'qualificationImage' is not null or undefined
            assertParamExists('registerTrainer', 'qualificationImage', qualificationImage)
            // verify required parameter 'trainingProgramImage' is not null or undefined
            assertParamExists('registerTrainer', 'trainingProgramImage', trainingProgramImage)
            const localVarPath = `/api/v1/trainer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', new Blob([JSON.stringify(data)], { type: "application/json", }));
            }
    
            if (qualificationImage !== undefined) { 
                localVarFormParams.append('qualificationImage', qualificationImage as any);
            }
    
            if (trainingProgramImage !== undefined) { 
                localVarFormParams.append('trainingProgramImage', trainingProgramImage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트레이너가 회원의 식단을 리뷰합니다.
         * @summary 식단 리뷰
         * @param {ReviewMealRequest} reviewMealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewMeal: async (reviewMealRequest: ReviewMealRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewMealRequest' is not null or undefined
            assertParamExists('reviewMeal', 'reviewMealRequest', reviewMealRequest)
            const localVarPath = `/api/v1/trainer/meal/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewMealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트레이너를 검색합니다.
         * @summary 트레이너 검색
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTrainers: async (keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trainer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyWord !== undefined) {
                localVarQueryParameter['keyWord'] = keyWord;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainerControllerApi - functional programming interface
 * @export
 */
export const TrainerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 회원 아이디로 회원 이름을 확인합니다.
         * @summary 회원 확인
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkMember(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkMember(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.checkMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 식단 ID로 식단 계획을 조회합니다.
         * @summary 식단 계획 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealPlan(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MealPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.getMealPlan']?.[localVarOperationServerIndex]?.url;

            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersMeal(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainerMemberMealsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersMeal(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.getMembersMeal']?.[localVarOperationServerIndex]?.url;

            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 트레이너의 메인 페이지 정보를 조회합니다.
         * @summary 트레이너 메인 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainTrainer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMainPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainTrainer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.mainTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 트레이너의 회원 상세 정보를 조회합니다.
         * @summary 회원 상세 관리
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberDetailManagementTrainer(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMemberDetailManagementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberDetailManagementTrainer(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.memberDetailManagementTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 트레이너의 회원 관리를 조회합니다.
         * @summary 회원 관리
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memberManagementTrainer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMemberManagementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memberManagementTrainer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.memberManagementTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 트레이너의 마이 페이지 정보를 조회합니다.
         * @summary 트레이너 마이 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myPageTrainer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainerMyPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myPageTrainer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.myPageTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 트레이너가 새로운 티켓을 등록합니다.
         * @summary 티켓 등록
         * @param {TicketRegisterRequest} ticketRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerTicket(ticketRegisterRequest: TicketRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerTicket(ticketRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.registerTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 트레이너의 티켓 등록 페이지 정보를 조회합니다.
         * @summary 티켓 등록 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerTicketPage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerTicketPage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.registerTicketPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 트레이너 정보를 등록합니다.
         * @summary 트레이너 등록
         * @param {TrainerRequest} data 
         * @param {File} qualificationImage 
         * @param {File} trainingProgramImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerTrainer(data: TrainerRequest, qualificationImage: File, trainingProgramImage: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerTrainer(data, qualificationImage, trainingProgramImage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.registerTrainer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 트레이너가 회원의 식단을 리뷰합니다.
         * @summary 식단 리뷰
         * @param {ReviewMealRequest} reviewMealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewMeal(reviewMealRequest: ReviewMealRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewMeal(reviewMealRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.reviewMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 트레이너를 검색합니다.
         * @summary 트레이너 검색
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTrainerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTrainers(keyWord, category, location, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainerControllerApi.searchTrainers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrainerControllerApi - factory interface
 * @export
 */
export const TrainerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainerControllerApiFp(configuration)
    return {
        /**
         * 회원 아이디로 회원 이름을 확인합니다.
         * @summary 회원 확인
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMember(userId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.checkMember(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 식단 ID로 식단 계획을 조회합니다.
         * @summary 식단 계획 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlan(id: number, options?: any): AxiosPromise<MealPlanResponse> {
            return localVarFp.getMealPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersMeal(date: string, options?: any): AxiosPromise<Array<TrainerMemberMealsResponse>> {
            return localVarFp.getMembersMeal(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 트레이너의 메인 페이지 정보를 조회합니다.
         * @summary 트레이너 메인 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainTrainer(options?: any): AxiosPromise<TrainerMainPageResponse> {
            return localVarFp.mainTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 트레이너의 회원 상세 정보를 조회합니다.
         * @summary 회원 상세 관리
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberDetailManagementTrainer(userId?: string, options?: any): AxiosPromise<TrainerMemberDetailManagementResponse> {
            return localVarFp.memberDetailManagementTrainer(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 트레이너의 회원 관리를 조회합니다.
         * @summary 회원 관리
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memberManagementTrainer(options?: any): AxiosPromise<TrainerMemberManagementResponse> {
            return localVarFp.memberManagementTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 트레이너의 마이 페이지 정보를 조회합니다.
         * @summary 트레이너 마이 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myPageTrainer(options?: any): AxiosPromise<TrainerMyPageResponse> {
            return localVarFp.myPageTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * 트레이너가 새로운 티켓을 등록합니다.
         * @summary 티켓 등록
         * @param {TicketRegisterRequest} ticketRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTicket(ticketRegisterRequest: TicketRegisterRequest, options?: any): AxiosPromise<string> {
            return localVarFp.registerTicket(ticketRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 트레이너의 티켓 등록 페이지 정보를 조회합니다.
         * @summary 티켓 등록 페이지
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTicketPage(options?: any): AxiosPromise<ProgramListResponse> {
            return localVarFp.registerTicketPage(options).then((request) => request(axios, basePath));
        },
        /**
         * 트레이너 정보를 등록합니다.
         * @summary 트레이너 등록
         * @param {TrainerRequest} data 
         * @param {File} qualificationImage 
         * @param {File} trainingProgramImage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerTrainer(data: TrainerRequest, qualificationImage: File, trainingProgramImage: File, options?: any): AxiosPromise<string> {
            return localVarFp.registerTrainer(data, qualificationImage, trainingProgramImage, options).then((request) => request(axios, basePath));
        },
        /**
         * 트레이너가 회원의 식단을 리뷰합니다.
         * @summary 식단 리뷰
         * @param {ReviewMealRequest} reviewMealRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewMeal(reviewMealRequest: ReviewMealRequest, options?: any): AxiosPromise<string> {
            return localVarFp.reviewMeal(reviewMealRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 트레이너를 검색합니다.
         * @summary 트레이너 검색
         * @param {string} [keyWord] 
         * @param {SearchTrainersCategoryEnum} [category] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: any): AxiosPromise<SearchTrainerResponse> {
            return localVarFp.searchTrainers(keyWord, category, location, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainerControllerApi - object-oriented interface
 * @export
 * @class TrainerControllerApi
 * @extends {BaseAPI}
 */
export class TrainerControllerApi extends BaseAPI {
    /**
     * 회원 아이디로 회원 이름을 확인합니다.
     * @summary 회원 확인
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public checkMember(userId?: string, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).checkMember(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 식단 ID로 식단 계획을 조회합니다.
     * @summary 식단 계획 조회
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public getMealPlan(id: number, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).getMealPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public getMembersMeal(date: string, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).getMembersMeal(date, options).then((request) => request(this.axios, this.basePath));

    }

    /**
     * 현재 로그인한 트레이너의 메인 페이지 정보를 조회합니다.
     * @summary 트레이너 메인 페이지
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public mainTrainer(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).mainTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 트레이너의 회원 상세 정보를 조회합니다.
     * @summary 회원 상세 관리
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public memberDetailManagementTrainer(userId?: string, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).memberDetailManagementTrainer(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 트레이너의 회원 관리를 조회합니다.
     * @summary 회원 관리
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public memberManagementTrainer(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).memberManagementTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 트레이너의 마이 페이지 정보를 조회합니다.
     * @summary 트레이너 마이 페이지
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public myPageTrainer(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).myPageTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트레이너가 새로운 티켓을 등록합니다.
     * @summary 티켓 등록
     * @param {TicketRegisterRequest} ticketRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public registerTicket(ticketRegisterRequest: TicketRegisterRequest, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).registerTicket(ticketRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트레이너의 티켓 등록 페이지 정보를 조회합니다.
     * @summary 티켓 등록 페이지
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public registerTicketPage(options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).registerTicketPage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트레이너 정보를 등록합니다.
     * @summary 트레이너 등록
     * @param {TrainerRequest} data 
     * @param {File} qualificationImage 
     * @param {File} trainingProgramImage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public registerTrainer(data: TrainerRequest, qualificationImage: File, trainingProgramImage: File, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).registerTrainer(data, qualificationImage, trainingProgramImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트레이너가 회원의 식단을 리뷰합니다.
     * @summary 식단 리뷰
     * @param {ReviewMealRequest} reviewMealRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public reviewMeal(reviewMealRequest: ReviewMealRequest, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).reviewMeal(reviewMealRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트레이너를 검색합니다.
     * @summary 트레이너 검색
     * @param {string} [keyWord] 
     * @param {SearchTrainersCategoryEnum} [category] 
     * @param {string} [location] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerControllerApi
     */
    public searchTrainers(keyWord?: string, category?: SearchTrainersCategoryEnum, location?: string, options?: RawAxiosRequestConfig) {
        return TrainerControllerApiFp(this.configuration).searchTrainers(keyWord, category, location, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchTrainersCategoryEnum = {
    WeightLoss: 'WEIGHT_LOSS',
    MuscleGain: 'MUSCLE_GAIN',
    StaminaImprovement: 'STAMINA_IMPROVEMENT',
    FlexibilityImprovement: 'FLEXIBILITY_IMPROVEMENT',
    BodyShapeImprovement: 'BODY_SHAPE_IMPROVEMENT',
    BalanceImprovement: 'BALANCE_IMPROVEMENT',
    LifestyleImprovement: 'LIFESTYLE_IMPROVEMENT',
    HealthImprovement: 'HEALTH_IMPROVEMENT',
    BodyProfile: 'BODY_PROFILE',
    Other: 'OTHER'
} as const;
export type SearchTrainersCategoryEnum = typeof SearchTrainersCategoryEnum[keyof typeof SearchTrainersCategoryEnum];


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 식단 ID 를 통해 식단 로그를 제거
         * @summary 식단 기록 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeal: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMeal', 'id', id)
            const localVarPath = `/api/v1/users/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 주어진 날짜의 일일 식단 로그를 조회합니다.
         * @summary 일일 식단 로그 조회
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyMealLog: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getDailyMealLog', 'date', date)
            const localVarPath = `/api/v1/users/dailyMealLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 식단 조회
         * @summary 식단 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeal: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMeal', 'id', id)
            const localVarPath = `/api/v1/users/meal/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 회원의 정보를 조회합니다.
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 식단 재전송을 통해 식단 내용 변경
         * @summary 식단 내용 변경
         * @param {MealDto} mealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMeal: async (mealDto: MealDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mealDto' is not null or undefined
            assertParamExists('modifyMeal', 'mealDto', mealDto)
            const localVarPath = `/api/v1/users/meal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새 회원을 등록합니다.
         * @summary 회원 등록
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember: async (memberRegisterRequest: MemberRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberRegisterRequest' is not null or undefined
            assertParamExists('registerMember', 'memberRegisterRequest', memberRegisterRequest)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인한 회원의 식단을 업로드합니다.
         * @summary 식단 업로드
         * @param {string} [createdAt] 
         * @param {UploadMealMealTypeEnum} [mealType] 
         * @param {string} [title] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMeal: async (createdAt?: string, mealType?: UploadMealMealTypeEnum, title?: string, content?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/meal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (createdAt !== undefined) { 
                localVarFormParams.append('createdAt', createdAt as any);
            }
    
            if (mealType !== undefined) { 
                localVarFormParams.append('mealType', mealType as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 식단 ID 를 통해 식단 로그를 제거
         * @summary 식단 기록 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeal(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeal(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.deleteMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 주어진 날짜의 일일 식단 로그를 조회합니다.
         * @summary 일일 식단 로그 조회
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyMealLog(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyMealDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyMealLog(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getDailyMealLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 식단 조회
         * @summary 식단 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeal(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MealDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeal(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 회원의 정보를 조회합니다.
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 식단 재전송을 통해 식단 내용 변경
         * @summary 식단 내용 변경
         * @param {MealDto} mealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMeal(mealDto: MealDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMeal(mealDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.modifyMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새 회원을 등록합니다.
         * @summary 회원 등록
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerMember(memberRegisterRequest: MemberRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerMember(memberRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.registerMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인한 회원의 식단을 업로드합니다.
         * @summary 식단 업로드
         * @param {string} [createdAt] 
         * @param {UploadMealMealTypeEnum} [mealType] 
         * @param {string} [title] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMeal(createdAt?: string, mealType?: UploadMealMealTypeEnum, title?: string, content?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMeal(createdAt, mealType, title, content, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.uploadMeal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 식단 ID 를 통해 식단 로그를 제거
         * @summary 식단 기록 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeal(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteMeal(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 주어진 날짜의 일일 식단 로그를 조회합니다.
         * @summary 일일 식단 로그 조회
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyMealLog(date: string, options?: any): AxiosPromise<DailyMealDto> {
            return localVarFp.getDailyMealLog(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 식단 조회
         * @summary 식단 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeal(id: number, options?: any): AxiosPromise<MealDto> {
            return localVarFp.getMeal(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 회원의 정보를 조회합니다.
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 식단 재전송을 통해 식단 내용 변경
         * @summary 식단 내용 변경
         * @param {MealDto} mealDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMeal(mealDto: MealDto, options?: any): AxiosPromise<string> {
            return localVarFp.modifyMeal(mealDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 새 회원을 등록합니다.
         * @summary 회원 등록
         * @param {MemberRegisterRequest} memberRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerMember(memberRegisterRequest: MemberRegisterRequest, options?: any): AxiosPromise<string> {
            return localVarFp.registerMember(memberRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인한 회원의 식단을 업로드합니다.
         * @summary 식단 업로드
         * @param {string} [createdAt] 
         * @param {UploadMealMealTypeEnum} [mealType] 
         * @param {string} [title] 
         * @param {string} [content] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMeal(createdAt?: string, mealType?: UploadMealMealTypeEnum, title?: string, content?: string, options?: any): AxiosPromise<string> {
            return localVarFp.uploadMeal(createdAt, mealType, title, content, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 식단 ID 를 통해 식단 로그를 제거
     * @summary 식단 기록 삭제
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteMeal(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteMeal(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 주어진 날짜의 일일 식단 로그를 조회합니다.
     * @summary 일일 식단 로그 조회
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getDailyMealLog(date: string, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getDailyMealLog(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 식단 조회
     * @summary 식단 조회
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getMeal(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getMeal(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 회원의 정보를 조회합니다.
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 식단 재전송을 통해 식단 내용 변경
     * @summary 식단 내용 변경
     * @param {MealDto} mealDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public modifyMeal(mealDto: MealDto, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).modifyMeal(mealDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새 회원을 등록합니다.
     * @summary 회원 등록
     * @param {MemberRegisterRequest} memberRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public registerMember(memberRegisterRequest: MemberRegisterRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).registerMember(memberRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인한 회원의 식단을 업로드합니다.
     * @summary 식단 업로드
     * @param {string} [createdAt] 
     * @param {UploadMealMealTypeEnum} [mealType] 
     * @param {string} [title] 
     * @param {string} [content] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public uploadMeal(createdAt?: string, mealType?: UploadMealMealTypeEnum, title?: string, content?: string, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).uploadMeal(createdAt, mealType, title, content, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UploadMealMealTypeEnum = {
    Breakfast: 'BREAKFAST',
    Lunch: 'LUNCH',
    Dinner: 'DINNER'
} as const;
export type UploadMealMealTypeEnum = typeof UploadMealMealTypeEnum[keyof typeof UploadMealMealTypeEnum];


